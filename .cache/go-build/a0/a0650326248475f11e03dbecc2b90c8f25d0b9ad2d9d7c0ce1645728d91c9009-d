//go:cgo_ldflag "-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now"
// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype__Bool bool

type _Ctype__GoString_ string

type _Ctype_bool = _Ctype__Bool

type _Ctype_char int8

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_ulong uint64

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
//go:linkname __cgo_bootstrap_errno bootstrap_errno
//go:cgo_import_static bootstrap_errno
var __cgo_bootstrap_errno byte
var _Cvar_bootstrap_errno *_Ctype_int = (*_Ctype_int)(unsafe.Pointer(&__cgo_bootstrap_errno))
//go:linkname __cgo_bootstrap_msg bootstrap_msg
//go:cgo_import_static bootstrap_msg
var __cgo_bootstrap_msg byte
var _Cvar_bootstrap_msg **_Ctype_char = (**_Ctype_char)(unsafe.Pointer(&__cgo_bootstrap_msg))


func _Cfunc_CString(s string) *_Ctype_char {
	p := _cgo_cmalloc(uint64(len(s)+1))
	pp := (*[1<<30]byte)(p)
	copy(pp[:], s)
	pp[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_ff3c6fef0eaa_Cfunc_free
//go:linkname __cgofn__cgo_ff3c6fef0eaa_Cfunc_free _cgo_ff3c6fef0eaa_Cfunc_free
var __cgofn__cgo_ff3c6fef0eaa_Cfunc_free byte
var _cgo_ff3c6fef0eaa_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_ff3c6fef0eaa_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_ff3c6fef0eaa_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_ff3c6fef0eaa_Cfunc_process_arguments
//go:linkname __cgofn__cgo_ff3c6fef0eaa_Cfunc_process_arguments _cgo_ff3c6fef0eaa_Cfunc_process_arguments
var __cgofn__cgo_ff3c6fef0eaa_Cfunc_process_arguments byte
var _cgo_ff3c6fef0eaa_Cfunc_process_arguments = unsafe.Pointer(&__cgofn__cgo_ff3c6fef0eaa_Cfunc_process_arguments)

//go:cgo_unsafe_args
func _Cfunc_process_arguments(p0 _Ctype_int, p1 **_Ctype_char, p2 **_Ctype_char, p3 *_Ctype__Bool, p4 *_Ctype__Bool, p5 *_Ctype_ulong) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_ff3c6fef0eaa_Cfunc_process_arguments, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
		_Cgo_use(p5)
	}
	return
}
//go:cgo_import_static _cgo_ff3c6fef0eaa_Cfunc_validate_instance_name
//go:linkname __cgofn__cgo_ff3c6fef0eaa_Cfunc_validate_instance_name _cgo_ff3c6fef0eaa_Cfunc_validate_instance_name
var __cgofn__cgo_ff3c6fef0eaa_Cfunc_validate_instance_name byte
var _cgo_ff3c6fef0eaa_Cfunc_validate_instance_name = unsafe.Pointer(&__cgofn__cgo_ff3c6fef0eaa_Cfunc_validate_instance_name)

//go:cgo_unsafe_args
func _Cfunc_validate_instance_name(p0 *_Ctype_char) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_ff3c6fef0eaa_Cfunc_validate_instance_name, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

//go:cgo_import_static _cgo_ff3c6fef0eaa_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_ff3c6fef0eaa_Cfunc__Cmalloc _cgo_ff3c6fef0eaa_Cfunc__Cmalloc
var __cgofn__cgo_ff3c6fef0eaa_Cfunc__Cmalloc byte
var _cgo_ff3c6fef0eaa_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_ff3c6fef0eaa_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_ff3c6fef0eaa_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
